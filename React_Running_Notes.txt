To connect the local repo to remote repo, we have two ways

SSH way, create a key and add it to the github

PS D:\NAMASTE-REACT> ssh-keygen -t ed25519 -C "rahuljha.kumar25@gmail.com"
Generating public/private ed25519 key pair.
Enter file in which to save the key (C:\Users\RAHUL/.ssh/id_ed25519):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in C:\Users\RAHUL/.ssh/id_ed25519
Your public key has been saved in C:\Users\RAHUL/.ssh/id_ed25519.pub
The key fingerprint is:
SHA256:PkuP9WxqN2FO75oeTSBKe0ZI3WyQYWVm4xx0StWUdvU rahuljha.kumar25@gmail.com
The key's randomart image is:
+--[ED25519 256]--+
|        ..+OX.oo=|
|       . ooB+= o+|
|        o o.= . E|
|       . + . .   |
|        S o   .  |
|       . o  +o   |
|        + .+.o.  |
|       . *.o=o.  |
|        o.o=*+.  |
+----[SHA256]-----+

add the public key inside github

_____________________________________________________________________

Types of dependency :

There are two types of dependency
1. dev dependency - required in development phase, like bundling, chunking is only required to do in dev, hence it is a dev dependency, 
					because inside production we send the optimized code
2. normal dependency - okay to go in production also

_____________________________________________________________________

Parcel is a bundler and it is a beast which provides so many super powers to our app


 - Dev build
 - Local server
 - HMR - Hot module replacement
 - File watching algorithm - written in c++
 - Caching - Faster build
 - Image optimization
 - Minification
 - Bundling
 - Compressing
 - Consistent hashing
 - Code splittin
 - Differential bundling
 - Diagnostic
 - Error handling
 - Https
 - Tree Shaking - removal of unused code
_____________________________________________________________________

Difference between ^ and ~ :

whenever new minor version of any package is released, it we have put ^ then our package will be upgraded to that minor version.
But if there is a major version, then ^ will not do upgrade to major version, but if we have ~ then package will be upgraded to major version.

It is always safe to upgrde to minor version but not so safe to upgrade to major version, hence always put ^ and not put ~

_____________________________________________________________________

Transitive dependency - dependency has their own dependency and so on

_____________________________________________________________________

We should not checkin node_modules because it is too huge, but we should checkin package.json and package-lock.json, if we have package.json and package-lock.json, then we can
generate the node_modules by just running

npm install

_____________________________________________________________________

Command to generate dev build

npx parcel index.html

command to generate prod build

npm parcel build index.html

_____________________________________________________________________

Facebook developers created JSX to remove the complexity of creating element in React.

JSX is not html in javascript, JSX is a html or XML like syntax.

if JS engine does not understand JSX code, then how is it executed?

 - Before reaching to JS engine, JSX code is transpiled to JS code, and then it is understood by JS engine.
 
 - This transpiling of JSX is done by Parcel, but Parcel does not do it on its own, it delegates this responsibility to BABEL.
 - BABEL is a dependency of parcel, when we installed Parcel, we already got BABEL.
 
 - BABEL library is not created by facebook developers.
 
 - JSX code is converted to nothing but React.createElement()
 
 - JSX => React.createElement() => JS Object => HtmlElement(after render)
 
 - ** for giving attributes inside JSX - always use camelCase
 - for giving class in JSX attribute name is class and inside JSX it is className.
 
 - For writing multiple line JSX we wrap it inside small brackets()
_____________________________________________________________________

React Components :

There are two types of component in react.

1. Class based component - old way of writing code, nobody uses it now
2. Functional component - new way of writing code

Class based uses javascript classes whereas functional component uses javascript functions.

_____________________________________________________________________

React functional component :
 
 -it is just a normal javascript function.
 
 - a javascript function that returns a JSX code/react element is a react functional component
 
 -for creating a functional component always name it with capital letter
 
 const HeadingComponent = () =>(
	return <h1>Namaste React functional component</h1>
 )
 
how to render a functional component?

root.render(<HeadingComponent />);

_____________________________________________________________________

What is component composition ? Component inside another component

-> We can put one component another function component using <ComponentName /> 

const Title = () =>(
	<h1>Namaste react</h1>
)

const HeadingComponent = () =>(
	<div>
		<Title />
		<h1>Namaste React functional component</h1>
	</div>
 )
 
_____________________________________________________________________

How to write javascript inside functional component?

-> we write javascript inside functional component using curly braces{}

const num = 1000;
const HeadingComponent = () =>(
	<div>
		{num}
		{console.log("writing javascript inside functional component")}
		<h1>Namaste React functional component</h1>
	</div>
 )
 
_____________________________________________________________________

How to put react element inside functional component?

-> react element is nothing but normal javascript variable and we know that using curly braces{} we can write javascript inside functional component.
	hence we can put react element inside functional component using curly braces {}.

const title = <h1>Namaste React</h1>

const Heading = () =>(
	<div>
		{title}
		<h1>Inside function component</h1>
	</div>
)

_____________________________________________________________________

How to put one react element inside another react element?

-> We can acheive it using curly braces {}.

_____________________________________________________________________

***Props

props is the mechanism to dynamically pass data to functional component

passing a prop to a functional component is like passing argument to a function.

_____________________________________________________________________

Config driven UI :

UI which is driven by data in the backend is called config driven UI.
for example inside swiggy app, there is different offers running for different cities, so all the offers are data driven inside the UI.

_____________________________________________________________________

**
Why unique key is required when we are rendering multiple times a same component using map or loop functionality?

- Taking the example of multiple Restaurant cards inside Restaurant container, suppose we have no unique id, and there are 50 Restaurant cards in the container,
and a new Restaurant card is added, then React does not know that which Restaurant card is new and it renders all the 51 Restaurant cards, where in if you put unique key,
then React will exactly know which is the new Restaurant card, and it will only render the new Restaurant card.

This is a major performance point in React.


React donâ€™t recommend using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with component state.
Map function has index as the second argument which can be used as key theroratically, but React suggest not to use index as key.

If there is no unique key to use as key, then you can use Index as the last resort, it is better to use Index instead of not passing any key.
_____________________________________________________________________

There are two types of import and export

1. Default export
2. named export

There can be only one default export from a file, but in case you need to export multiple things from a file, then we can go for named export. There can be a combination of
one default export and multiple named export also.

eg. 
export const CDN_URL = "";
export const IMAGE_URL = "";

Importing of a named export :

to import named exports we have to write inside a curly brace {}

import {CDN_URL} from "./abcd";
_____________________________________________________________________

***
Whenever a state variable changes, React re-renders the component.

Reconcilliation algorithm/React Fibre

Virtual DOM is representation of actual DOM, also virtual DOM is javascript object

Diff Algorithm :

Whenever there is any change in any state variable then it finds out the difference between old virtual DOM and new virtual DOM.
and whatever differences are found, the DOM is rendered to update the difference.

_____________________________________________________________________

Class Based components :

What is a class based component?

-> Like we said functional components are nothing but normal javascript function, similar way class based components are nothing but normal javascript class.

for creating a class based component create a javascript class which should extend React.Component class

and then override the render method and return some JSX from the render method which will be rendered on the DOM.

class UserClass extends React.Component{

	render(){
		return(
			<div>
				<Rendering the JSX on the DOM>
			</div>
		)
	}
}
_____________________________________________________________________

How the props are received inside a class based component?

-> to receive props inside a class based component, we have define a constructor with the argument props, and fromt the constructor call the super(props), it is mandatory.

Now this props holds all the props passed to this class based component and to use this props use this keyword as the props are associated to the class.(eg. this.props.name)

class UserClass extends React.Component{

	constructor(props){
		super(props)
	}

	render(){
		return(
			<div>
				<Rendering the JSX on the DOM>
				{this.props.name}
			</div>
		)
	}
}
_____________________________________________________________________

How to create state/local variables inside a class based component?

-> Inside the class we have a predefiend state given to us which is a big object and we define all our state/local variables inside the big object state.
	and to access the state variables, we use this keyword (this.state.count)

import React from "react";

class UserClass extends React.Component{

    constructor(props){
        super(props)

        this.state = {
            count: 0,
            count2: 2,
        };
    }

    render(){
        const {name, location} = this.props;
        const {count, count2} = this.state;
        return(
            <div className="user-card">
                <h2>count : {count}</h2>
                <h2>count2 : {count2}</h2>
                <h2>Name : {name}</h2>
                <h3>Location : {location}</h3>
                <h4>Contact : @rahjha</h4>
            </div>
        )
    }
}

export default UserClass;

_____________________________________________________________________

How to update the state variables?

-> Recat gives you access to an important function this.setState({object}), and the object contains the updated value of the variable.
	
Never update state variables directly by using assignment(=) operator in class based components.

import React from "react";

class UserClass extends React.Component{

    constructor(props){
        super(props)

        this.state = {
            count: 0,
            count2: 2,
        };
    }

    render(){
        const {name, location} = this.props;
        const {count, count2} = this.state;
        return(
            <div className="user-card">
                <h2>count : {count}</h2>
                <h2>count2 : {count2}</h2>
                <button onClick={()=>{
                    this.setState({
                        count: this.state.count+1,
                        count2: this.state.count2+1
                    })
                }}>Increase count</button>
                <h2>Name : {name}</h2>
                <h3>Location : {location}</h3>
                <h4>Contact : @rahjha</h4>
            </div>
        )
    }
}

export default UserClass;

_____________________________________________________________________

Life cycle of class based component :

-> React class based component has one more method named componentDidMount, which is basically called after the constructor and render() method, so once we render the component
then we want to make an API call to fetch the data and re-render the component, it can be acheived using componentDidMount() method. Hence componentDidMount() method is used
to call API's.

Below is the life cycle sequence for class based component :

constructor
render()
componentDidMount()

1. What is the life cycle sequence when a parent class based component calls a child class based component?

->  parent constructor
	parent render()
	child constructor
	child render()
	child componentDidMount()
	parent componentDidMount()
	
2. What is the life cycle sequence when a parent class based component calls two child class based component?

->  parent constructor
	parent render()
	
		child-1 constructor
		child-1 render()
		
		child-2 constructor
		child-2 render()
		
		child-1 componentDidMount()
		child-2 componentDidMount()
	parent componentDidMount()
	
this happens because of optimization done by react, it batches the render phase of both the childs first and then it calls the componentDidMount.
because render phase is where the DOM update happens and DOM update is a very costly operation, hence updating DOM every single time for each component is not good,
hence React batches the rendering phase of multiple child components.
_____________________________________________________________________

--MOUNTING PHASE--

-Constructor (with dummy data)
-Render (with dummy data)
	<HTML dummy>
	
-Component Did Mount
	<API call>
	<this.setState> -> state variables are updated
	
--UPDATE PHASE--
	render(it is triggered because state variable is updated with API call data)
	
	componentDidUpdate -> It is called after each render
	
	componentWillUnmount -> it is called once we move to another component(e.g moving from About component to Contact component, used for doing clean before moving to another component)
	
_____________________________________________________________________

***NEVER COMPARE CLASS BASED COMPONENT LIFE CYCLE METHODS TO FUNCTIONAL COMPONENT!!

Use case of componentWillUnmount :

We know that React apps are SPA (single page application), which means when we move from one page to another page then the whole application does not refresh instead only
component changes from one to another. hence if we have put some conditions like printing something after an interval inside one component and we move to another component,
then instead of closing that printing after interval it continues to do it. which is a very bad programming and wastes CPU resource. Hence to encounter this we have got
componentWillUnmount() method which will be called once we move from one component to another component.


import React from "react";

class UserClass extends React.Component{

    constructor(props){
        super(props)
        console.log("child-1 constructor");
        this.state = {
            count: 0,
            count2: 2,
            userInfo :{
                name: "dummy",
                location: "dummy"
            }
        };
    }

    async componentDidMount(){

        this.timer = setInterval(()=>{
            console.log("NAMASTE REACT OP");
        },1000);

        console.log("child-1 componentDidMount");

        const data = await fetch("https://api.github.com/users/rahjha");
        const json = await data.json();
        console.log(json);

        this.setState({
            userInfo: json
        })
        console.log(this.state.userInfo);
    }

    componentDidUpdate(){
        console.log("componentDidUpdate");
    }

    componentWillUnmount(){
        clearInterval(this.timer);
        console.log("componentWillUnmount");
    }

    render(){

        const {name, location, avatar_url} = this.state.userInfo;
        console.log("child-1 render");
        return(
            <div className="user-card">
                <h2>count : {this.state.count}</h2>
                <h2>count2 : {this.state.count2}</h2>
                <button onClick={()=>{
                    this.setState({
                        count: this.state.count+1,
                        count2: this.state.count2+1
                    })
                }}>Increase count</button><p/>
                <img src={avatar_url} />
                <h2>Name : {name}</h2>
                <h3>Location : {location}</h3>
                <h4>Contact : @rahjha</h4>
            </div>
        )
    }
}

export default UserClass;

_____________________________________________________________________

****
How to we implement componentWillUnmount feature inside functional component?

-> we have a return method inside useEffect hook, which will be called when we move from one component to another, we can write the clean up code there inside the return method.

import { useEffect } from "react";

const User = (props) => {

    useEffect(() => {
        const timer = setInterval(() => {
            console.log("NAMASTE REACT OP");
        }, 1000);

        return () =>{
            clearInterval(timer);
        }
    },[])

    const {name, location} = props;
    return(
        <div className="user-card">
            <h2>Name : {name}</h2>
            <h3>Location : {location}</h3>
            <h4>Contact : @rahjha</h4>
        </div>
    )
}
export default User;

_____________________________________________________________________

Optimizing our App :

//Chunking
//Code splitting
//Dynamic bunding
//lazy loading
//on demand loading

Lets take an example of MakeMyTrip website, this website has many components like Flight ticket, Bus ticket, train ticket, hotel booking and many more.
Now when we open the website, user is mostly interested in exploring any one of the sections like flight booking or hotel booking, but as of now what we have seen is
React bundles our all code and creates one .js file for production where all the code is present. But in such cases where the App is too big like MakeMyTrip, this approach is
totally wrong, whats the need of loading Train or bus booking section when the user is only interested in Flight booking, hence we have to do Chunking/Code splitting/Dynamic loading/
lazy loading/ on demand loading inside of app.

e.g in our app, we have built as Grocery section and we don't want to load Grocery section as soon as our App is launched.
we do it with the help of lazy (named import from react), instead of importing the component directly, we use lazy to import it, lazy takes a callback function.

-> const Grocery = lazy(()=>import("./components/Grocery"));

so now your Grocery component will not be loaded when your app is launced for first time. But there is one problem as the Grocery code is not loaded and as soon as you try to
go on the Grocery section you will see error as Grocery code is still not loaded for us, so what happens is, as soon as we click on Grocery section, the code is loaded but it
takes some milliseconds of time to load the code and meanwhile it fails to load the component as code is not present yet. Hence what we do it we use Suspense which is also 
imported from react, Suspense take a fallback method, where we can mention to fallback on something (like <Shimmer />) untill our Grocery code is loaded, so now instead of
throwing error, it falls back on the code mention inside <Suspense fallback={<h1>Loading.....</h1>}><Grocery /></ Suspense>


	//lazy loading
	const Grocery = lazy(()=>import("./components/Grocery"));

	//Using <Suspense with fallback>
      {
        path : "/grocery",
        element : <Suspense fallback={<h1>Loading....</h1>}><Grocery /></Suspense>
      }
	  
_____________________________________________________________________


Higher order component ?

-> It is a function that takes a component as input and returns a component as output.

Higher order function works on an existing function and enhances it, and then returns the same function as output.

e.g. in swiggy, you must have seen some restaurant which are promoted with a promoted tag on the card, while others don't have the promoted label on the card.
hence the same card is passed to some higher order component and promoted label is put on it.

_____________________________________________________________________

Read about lifting the state up, what is controlled and uncontrolled component.

_____________________________________________________________________

Read about props drilling and problem with props drilling in react.

Props drilling is not a good way of writing code, we may not need a prop inside on component but still we pass because we may need the props inside one level
low hierarchy.

Alos changes inside prop in one component re-renders multiple components.

_____________________________________________________________________

Context :

React context is a way to manage state globally in case of multi level components hierarchy, passing of props from one component to further down stream components involves props
drilling. props drilling is a very cumbersome process, so to avoid props drilling, we can declare a React context and put the state inside it which needs to be used by many
other components.

___________
import { createContext } from "react";

const UserContext = createContext({
    loggedInUser : "Default User",
});

export default UserContext;
___________
Header.js

    const data = useContext(UserContext);
    console.log(data);
	
	<li className="ml-2">{data.loggedInUser}</li>
___________

Suppose you had some validation in your code and you have retrieved the correct user name, and now you want to override the default user with correct user.
wrap all the pages inside UserContect.Provider

  const [userInfo, setUserInfo] = useState();

  useEffect(()=>{
    //Make an API call and send userName
    const data = {
      name : "Rahul Jha"
    }
    setUserInfo(data.name);
  },[])

<UserContext.Provider value={{ loggedInUser : userInfo, setUserInfo }}>
        <div className="app">
            <Header />
            <Outlet />
        </div>
      </UserContext.Provider>

and now you can pass your own userInfo for loggedInUser instead of default user.

and suppose you want to make changes in user inside the Body component and want that to reflect inside Header component, then you can pass the setter function setUserInfo also
inside the UserContext.Provider, then get it inside Header component with the help of useContext hook and set the value using setter function.

const {loggedInUser, setUserInfo} = useContext(UserContext);

				<div className="p-4 m-4 flex items-center">
                    <label>UserName : </label>
                    <input className="border border-black ml-2" 
                            value={loggedInUser} 
                            onChange={(e)=>setUserInfo(e.target.value)}
                    />
                </div>

_____________________________________________________________________

