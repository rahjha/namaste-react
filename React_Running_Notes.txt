To connect the local repo to remote repo, we have two ways

SSH way, create a key and add it to the github

PS D:\NAMASTE-REACT> ssh-keygen -t ed25519 -C "rahuljha.kumar25@gmail.com"
Generating public/private ed25519 key pair.
Enter file in which to save the key (C:\Users\RAHUL/.ssh/id_ed25519):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in C:\Users\RAHUL/.ssh/id_ed25519
Your public key has been saved in C:\Users\RAHUL/.ssh/id_ed25519.pub
The key fingerprint is:
SHA256:PkuP9WxqN2FO75oeTSBKe0ZI3WyQYWVm4xx0StWUdvU rahuljha.kumar25@gmail.com
The key's randomart image is:
+--[ED25519 256]--+
|        ..+OX.oo=|
|       . ooB+= o+|
|        o o.= . E|
|       . + . .   |
|        S o   .  |
|       . o  +o   |
|        + .+.o.  |
|       . *.o=o.  |
|        o.o=*+.  |
+----[SHA256]-----+

add the public key inside github

_____________________________________________________________________

Types of dependency :

There are two types of dependency
1. dev dependency - required in development phase, like bundling, chunking is only required to do in dev, hence it is a dev dependency, 
					because inside production we send the optimized code
2. normal dependency - okay to go in production also

_____________________________________________________________________

Parcel is a bundler and it is a beast which provides so many super powers to our app


 - Dev build
 - Local server
 - HMR - Hot module replacement
 - File watching algorithm - written in c++
 - Caching - Faster build
 - Image optimization
 - Minification
 - Bundling
 - Compressing
 - Consistent hashing
 - Code splittin
 - Differential bundling
 - Diagnostic
 - Error handling
 - Https
 - Tree Shaking - removal of unused code
_____________________________________________________________________

Difference between ^ and ~ :

whenever new minor version of any package is released, it we have put ^ then our package will be upgraded to that minor version.
But if there is a major version, then ^ will not do upgrade to major version, but if we have ~ then package will be upgraded to major version.

It is always safe to upgrde to minor version but not so safe to upgrade to major version, hence always put ^ and not put ~

_____________________________________________________________________

Transitive dependency - dependency has their own dependency and so on

_____________________________________________________________________

We should not checkin node_modules because it is too huge, but we should checkin package.json and package-lock.json, if we have package.json and package-lock.json, then we can
generate the node_modules by just running

npm install

_____________________________________________________________________

Command to generate dev build

npx parcel index.html

command to generate prod build

npm parcel build index.html

_____________________________________________________________________

Facebook developers created JSX to remove the complexity of creating element in React.

JSX is not html in javascript, JSX is a html or XML like syntax.

if JS engine does not understand JSX code, then how is it executed?

 - Before reaching to JS engine, JSX code is transpiled to JS code, and then it is understood by JS engine.
 
 - This transpiling of JSX is done by Parcel, but Parcel does not do it on its own, it delegates this responsibility to BABEL.
 - BABEL is a dependency of parcel, when we installed Parcel, we already got BABEL.
 
 - BABEL library is not created by facebook developers.
 
 - JSX code is converted to nothing but React.createElement()
 
 - JSX => React.createElement() => JS Object => HtmlElement(after render)
 
 - ** for giving attributes inside JSX - always use camelCase
 - for giving class in JSX attribute name is class and inside JSX it is className.
 
 - For writing multiple line JSX we wrap it inside small brackets()
_____________________________________________________________________

React Components :

There are two types of component in react.

1. Class based component - old way of writing code, nobody uses it now
2. Functional component - new way of writing code

Class based uses javascript classes whereas functional component uses javascript functions.

_____________________________________________________________________

React functional component :
 
 -it is just a normal javascript function.
 
 - a javascript function that returns a JSX code/react element is a react functional component
 
 -for creating a functional component always name it with capital letter
 
 const HeadingComponent = () =>(
	return <h1>Namaste React functional component</h1>
 )
 
how to render a functional component?

root.render(<HeadingComponent />);

_____________________________________________________________________

What is component composition ? Component inside another component

-> We can put one component another function component using <ComponentName /> 

const Title = () =>(
	<h1>Namaste react</h1>
)

const HeadingComponent = () =>(
	<div>
		<Title />
		<h1>Namaste React functional component</h1>
	</div>
 )
 
_____________________________________________________________________

How to write javascript inside functional component?

-> we write javascript inside functional component using curly braces{}

const num = 1000;
const HeadingComponent = () =>(
	<div>
		{num}
		{console.log("writing javascript inside functional component")}
		<h1>Namaste React functional component</h1>
	</div>
 )
 
_____________________________________________________________________

How to put react element inside functional component?

-> react element is nothing but normal javascript variable and we know that using curly braces{} we can write javascript inside functional component.
	hence we can put react element inside functional component using curly braces {}.

const title = <h1>Namaste React</h1>

const Heading = () =>(
	<div>
		{title}
		<h1>Inside function component</h1>
	</div>
)

_____________________________________________________________________

How to put one react element inside another react element?

-> We can acheive it using curly braces {}.

_____________________________________________________________________
